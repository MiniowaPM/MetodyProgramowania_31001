#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Struktura macierzy
struct Matrix {
    string name;
    int rows;
    int cols;
    vector<vector<float>> data;

    Matrix(int rows, int cols) : rows(rows), cols(cols), data(rows, vector<float> (cols)) {};
    Matrix(string name, int rows, int cols) : name(name), rows(rows), cols(cols), data(rows, vector<float>(cols)) {};
};

class matrixEquations {
public:
    // Wyświetlanie macierzy
    void displayMatrix(const Matrix& matrix) {
        cout << "Result: \n";
        for (int i = 0; i < matrix.rows; i++){
            cout << "| ";
            for (int j = 0; j < matrix.cols; j++){
                cout << matrix.data[i][j] << " ";
            }
            cout << "|\n";
        }
    };
    // Dodawanie macierzy
    Matrix addMatrix(Matrix& matrix1, Matrix& matrix2) {
        if (matrix1.rows == matrix2.rows and matrix1.cols == matrix2.cols) {
            Matrix resultMatrix(matrix1.rows, matrix1.cols);
            for (int i = 0; i < matrix1.rows; i++) {
                for (int j = 0; j < matrix1.cols; j++) {
                    resultMatrix.data[i][j] = matrix1.data[i][j] + matrix2.data[i][j];
                }
            }
            return resultMatrix;
        }
    };
    // Odejmowanie macierzy
    Matrix subtractMatrix(Matrix& matrix1, Matrix& matrix2) {
        if (matrix1.rows == matrix2.rows and matrix1.cols == matrix2.cols) {
            Matrix resultMatrix(matrix1.rows, matrix1.cols);
            for (int i = 0; i < matrix1.rows; i++) {
                for (int j = 0; j < matrix1.cols; j++) {
                    resultMatrix.data[i][j] = matrix1.data[i][j] - matrix2.data[i][j];
                }
            }
            return resultMatrix;
        }
    };
    // Mnożenie macierzy
    Matrix multiplyMatrix(Matrix& matrix1, Matrix& matrix2) {
        if (matrix1.cols == matrix2.rows) {
            Matrix resultMatrix(matrix1.rows, matrix2.cols);
            for (int i = 0; i < matrix1.rows; i++) {
                for (int j = 0; j < matrix2.cols; j++) {
                    for (int k = 0; k < matrix1.cols; k++) {
                        resultMatrix.data[i][j] = resultMatrix.data[i][j] + matrix1.data[i][k] * matrix2.data[k][j];
                    }
                }
            }
            return resultMatrix;
        }
    };
    // Mnożenie macierzy przez stałą watrość
    Matrix multiplyMatrix(Matrix& matrix, float value) {
        Matrix resultMatrix(matrix.rows, matrix.cols);
        for (int i = 0; i < matrix.rows; i++) {
            for (int j = 0; j < matrix.cols; j++) {
                resultMatrix.data[i][j] = matrix.data[i][j] * value;
            }
        }
        return resultMatrix;
    };
    // Potęgowanie macierzy
    Matrix powerOfMatrix(Matrix& matrix, int value) {
        Matrix resultMatrix(matrix.rows, matrix.cols);
        resultMatrix = matrix;
        for (int k = 1; k < value; k++) {
            for (int i = 0; i < matrix.rows; i++) {
                for (int j = 0; j < matrix.cols; j++) {
                    resultMatrix.data[i][j] = resultMatrix.data[i][j] * matrix.data[i][j];
                }
            }
        }
        return resultMatrix;
    };
    // Macierz transponowana
    Matrix transposeMatrix(Matrix& matrix) {
        Matrix resultMatrix(matrix.cols, matrix.rows);
        for (int i = 0; i < matrix.rows; i++) {
            for (int j = 0; j < matrix.cols; j++) {
                resultMatrix.data[i][j] = matrix.data[j][i];
            }
        }
        return resultMatrix;
    };
    // Wyznacznik macierzy - Algorytm Laplacea
    float detMatrix(Matrix& matrix) {
        if (matrix.cols != matrix.rows) {
            cout << "Macierz nie jest kwadratowa";
            return 0;
        };
        if (matrix.cols == 2) {
            return matrix.data[0][0] * matrix.data[1][1] - matrix.data[0][1] * matrix.data[1][0];
        }
        else {
            float cumulativeSum = 0, sign = 1, determinant;
            for (int colNum = 0; colNum < matrix.cols; colNum++) {
                for (int rowNum = 0; rowNum < matrix.rows; rowNum++){
                    // Funkcja pomocnicza tworząca pod macierz o stopień niższą
                    Matrix subMatrix = findSubMatrix(matrix, rowNum, colNum);
                    determinant = detMatrix(subMatrix);
                    cumulativeSum += matrix.data[0][colNum] * determinant * sign; // colNum przekracza wartość 
                    sign = -sign;
                }
            }
            return cumulativeSum;
        }
    };
    Matrix findSubMatrix(Matrix& matrix, int skipRow, int skipCol) {
        Matrix subMatrix(matrix.rows - 1, matrix.cols - 1);
        int countRows = 0;
        for (int i = 0; i < matrix.rows; i++) {
            if (i == skipRow) continue;
            int countCols = 0;
            for (int j = 0; j < matrix.cols; j++) {
                if (j == skipCol) continue;
                    subMatrix.data[countRows][countCols] = matrix.data[i][j];
                    countCols++;
            }
            countRows++;
        }
        return subMatrix;
    };
    // Macierz odwrotna
    Matrix inverseMatrix(Matrix& matrix) {
        Matrix resultMatrix(matrix.rows, matrix.cols);
        Matrix transposedMatrix = transposeMatrix(matrix);
        float det = detMatrix(matrix);
        for (int i = 0; i < matrix.rows; i++){
            for (int j = 0; j < matrix.cols; j++)
            {
                resultMatrix.data[i][j] = 1 / det * transposedMatrix.data[i][j];
            }
        }
        return resultMatrix;
    };
    // Rząd macierzu - DO ZROBIENIA
    int rankMatrix(Matrix& matrix) {
        int rank = 0;
        for (int i = 0; i < matrix.rows; i++){
            for (int j = 0; j < matrix.cols; j++){

            }
        }
    };
};
